{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useCallback } from 'react';\n\nfunction useForm(stateSchema, callback) {\n  const {\n    0: state,\n    1: setState\n  } = useState(stateSchema);\n  const {\n    0: meta,\n    1: setMeta\n  } = useState(null);\n  const {\n    0: disable,\n    1: setDisable\n  } = useState(true);\n  const {\n    0: isDirty,\n    1: setIsDirty\n  } = useState(false);\n  useEffect(() => {\n    setDisable(true);\n  }, []);\n  useEffect(() => {\n    isDirty && setDisable(validateState());\n  }, [state, isDirty]);\n  const validateState = useCallback(() => {\n    const hasErrorInState = Object.keys(stateSchema).some(key => {\n      const isInputFieldRequired = stateSchema[key].required;\n      const stateValue = state[key].value; // state value\n\n      const stateError = state[key].error; // state error\n\n      return isInputFieldRequired && !stateValue || stateError;\n    });\n    return hasErrorInState;\n  }, [state, stateSchema]);\n  const handleOnChange = useCallback(event => {\n    setIsDirty(true);\n    setMeta(null);\n    const name = event.target.name;\n    const value = event.target.value;\n    let error = '';\n\n    if (stateSchema[name].required) {\n      if (!value) {\n        error = 'This is required field.';\n      }\n    }\n\n    if (stateSchema[name].validator !== null && typeof stateSchema[name].validator === 'object') {\n      if (value && !stateSchema[name].validator.regEx.test(value)) {\n        error = stateSchema[name].validator.error;\n      }\n    }\n\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: {\n        value,\n        error\n      }\n    }));\n  }, [stateSchema]);\n  const handleOnSubmit = useCallback(event => {\n    event.preventDefault();\n\n    if (!validateState()) {\n      callback(state, setMeta);\n    }\n  }, [state]);\n  return {\n    state,\n    disable,\n    handleOnChange,\n    handleOnSubmit,\n    meta,\n    setState,\n    setMeta\n  };\n}\n\nexport default useForm;","map":{"version":3,"sources":["/Users/benjamin/Desktop/perso/ventejob/modules/commons/components/form/useForm.js"],"names":["useState","useEffect","useCallback","useForm","stateSchema","callback","state","setState","meta","setMeta","disable","setDisable","isDirty","setIsDirty","validateState","hasErrorInState","Object","keys","some","key","isInputFieldRequired","required","stateValue","value","stateError","error","handleOnChange","event","name","target","validator","regEx","test","prevState","handleOnSubmit","preventDefault"],"mappings":"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","sourcesContent":["import {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\n\n\nfunction useForm(stateSchema, callback) {\n  const [state, setState] = useState(stateSchema);\n  const [meta, setMeta] = useState(null)\n  const [disable, setDisable] = useState(true);\n  const [isDirty, setIsDirty] = useState(false);\n\n  useEffect(() => {\n    setDisable(true)\n  }, [])\n\n\n  useEffect(() => {\n    isDirty && setDisable(validateState())\n  }, [state, isDirty])\n\n  const validateState = useCallback(() => {\n    const hasErrorInState = Object.keys(stateSchema).some(key => {\n      const isInputFieldRequired = stateSchema[key].required;\n      const stateValue = state[key].value; // state value\n      const stateError = state[key].error; // state error\n\n      return (isInputFieldRequired && !stateValue) || stateError;\n    });\n\n    return hasErrorInState;\n  }, [state, stateSchema]);\n\n\n  const handleOnChange = useCallback(\n    event => {\n      setIsDirty(true);\n      setMeta(null);\n\n      const name = event.target.name;\n      const value = event.target.value;\n\n      let error = '';\n      if (stateSchema[name].required) {\n        if (!value) {\n          error = 'This is required field.';\n        }\n      }\n\n      if (\n        stateSchema[name].validator !== null &&\n        typeof stateSchema[name].validator === 'object'\n      ) {\n        if (value && !stateSchema[name].validator.regEx.test(value)) {\n          error = stateSchema[name].validator.error;\n        }\n      }\n\n      setState(prevState => ({\n        ...prevState,\n        [name]: {\n          value,\n          error\n        },\n      }));\n    },\n    [stateSchema]\n  );\n  const handleOnSubmit = useCallback(\n    event => {\n      event.preventDefault();\n      if (!validateState()) {\n        callback(state, setMeta);\n      }\n    },\n    [state]\n  );\n  return {\n    state,\n    disable,\n    handleOnChange,\n    handleOnSubmit,\n    meta,\n    setState,\n    setMeta\n  };\n}\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}